// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                       String      @id @default(auto()) @map("_id") @db.ObjectId
  public_id                String?
  name                     String      @unique
  displayName              String?
  email                    String      @unique
  emailVerified            DateTime?
  hashedPassword           String?
  image                    String?
  country                  String?
  gender                   String
  dateOfBirth              DateTime?
  biography                String?
  coverPhoto               String?
  profileAvatar            String?
  coin                     Int         @default(0)
  points                   Int         @default(0)
  signature                String?     @unique
  token                    String?     @unique
  role                     UserRole    @default(USER)
  passwordResetTokenExpiry DateTime?
  createdAt                DateTime    @default(now())
  updatedAt                DateTime    @updatedAt
  lastLogin                DateTime?
  popularitySent           Json[]
  totalPopularitySent      Json[]
  followers                String[]
  following                String[]
  sentRequests             Friend[]    @relation("FriendRequestRelation")
  receivedRequests         Friend[]    @relation("FriendRespondRelation")
  friends                  Friend[]    @relation("UserFriends")
  friendsAsFriend          Friend[]    @relation("UserFriendsAsFriend")
  accounts                 Account[]
  sessions                 Session[]
  Watchlist                Watchlist[]
  DramaList                DramaList[]
  comment                  Comment[]
  Rating                   Rating[]
}

model Friend {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  friendRespondId String   @db.ObjectId
  friendRequestId String   @db.ObjectId
  status          String // 'pending', 'accepted', 'rejected'
  actionDatetime  DateTime
  profileAvatar   String?
  image           String
  name            String
  country         String?
  notification    String   @default("unread")
  friendRequest   User     @relation("FriendRequestRelation", fields: [friendRequestId], references: [id])
  friendRespond   User     @relation("FriendRespondRelation", fields: [friendRespondId], references: [id])
  user            User     @relation("UserFriends", fields: [friendRequestId], references: [id])
  friend          User     @relation("UserFriendsAsFriend", fields: [friendRespondId], references: [id])
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model VerificationToken {
  identifier String   @id @default(auto()) @map("_id") @db.ObjectId
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Drama {
  id                     String  @id @default(auto()) @map("_id") @db.ObjectId
  tv_id                  String  @unique
  userId                 String
  public_id              String?
  details                Json[]
  cover                  String?
  related_title          Json[]
  cast                   Json[]
  crew                   Json[]
  services               Json[]
  external_links         Json[]
  released_information   Json[]
  production_information Json[]
  genres_tags            Json[]
  changes                Json[]  @default([])
  changeCount            Int     @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Movie {
  id                     String        @id @default(auto()) @map("_id") @db.ObjectId
  movie_id               String        @unique
  userId                 String
  public_id              String?
  details                Json[]
  cover                  String?
  related_title          Json[]
  cast                   Json[]
  crew                   Json[]
  services               Json[]
  external_links         Json[]
  released_information   Json[]
  production_information Json[]
  genres_tags            Json[]
  changes                Json[]        @default([])
  changeCount            Int           @default(0)
  Review                 MovieReview[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Person {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  personId       String   @unique
  userID         String?
  name           String?
  love           Int?
  lovedBy        String[]
  popularity     Json[]
  sentBy         Json[]
  public_id      String?
  cover          String?
  details        Json[]
  cast           Json[]
  crew           Json[]
  external_links Json[]
  changes        Json[]   @default([])
  changeCount    Int      @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Watchlist {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String   @db.ObjectId
  tvId        Json[]
  movieId     Json[]
  favoriteIds Json[]
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model DramaList {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  userId       String     @db.ObjectId
  listId       String     @unique
  type         String
  listTitle    String
  privacy      String
  description  String?
  comment      String?
  sortBy       String
  love         Int?
  lovedBy      String[]
  thumbnail    String?
  public_id    String?
  dramaComment Json[]
  movieId      Int[]
  tvId         Int[]
  Review       TvReview[]
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model Comment {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  message       String
  userId        String    @db.ObjectId
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId        String
  parent        Comment?  @relation("ParentChild", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  children      Comment[] @relation("ParentChild")
  replies       Json[]
  spoiler       Boolean   @default(false)
  parentId      String?   @db.ObjectId
  repliedUserId String?   @db.ObjectId
  love          Int       @default(0)
  lovedBy       String[]  @default([])
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Rating {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @unique @db.ObjectId
  rating    Float
  mood      String?
  emojiImg  String?
  movieId   String?  @unique
  tvId      String?  @unique
  status    String
  episode   String
  notes     String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TvReview {
  id               String    @id @default(auto()) @map("_id") @db.ObjectId
  tv_id            String    @unique
  userId           String    @unique @db.ObjectId
  userInfo         Json?
  rating_score     Json?
  overall_score    String?
  spoiler          Boolean?
  finishedWatching Boolean?
  dropping         Boolean?
  episode          Int?
  review_language  String?
  headline         String?
  review           String?
  reviewHelpful    Int       @default(0)
  reviewNotHelpful Int       @default(0)
  reviewBy         Json[]
  drama_list       DramaList @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model MovieReview {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  movie_id         String   @unique
  userId           String   @unique @db.ObjectId
  userInfo         Json?
  rating_score     Json?
  overall_score    String?
  spoiler          Boolean?
  finishedWatching Boolean?
  dropping         Boolean?
  episode          Int?
  review_language  String?
  headline         String?
  review           String?
  reviewHelpful    Int      @default(0)
  reviewNotHelpful Int      @default(0)
  reviewBy         Json[]
  movie_list       Movie    @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Customers {
  id                 String    @id @default(auto()) @map("_id") @db.ObjectId
  email              String    @unique
  orderId            String?   @unique
  paymentMethod      String?
  subscriptionCancel DateTime?
}

model CheckoutSession {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  userId        String?   @unique
  orderId       String?   @unique
  email         String?   @unique
  orderPaypal   Json?
  order         Json
  isPaid        Boolean   @default(false)
  paidAt        DateTime?
  paymentResult Json?
}

enum UserRole {
  ADMIN
  USER
}
